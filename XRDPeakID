{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bb00498-3f3f-48fa-872d-af070f5fa8f6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d074a74e-d1bb-4e78-add1-cbc772da8362",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b603b882-5129-4880-9374-835694ce902f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter matching tolerance in degrees (e.g., 0.5):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Matched peaks saved to: 1_Ti64Si_matched.csv\n",
      "âœ… Matched peaks saved to: 2_Ti35_matched.csv\n",
      "âœ… Matched peaks saved to: 3_Ti666_matched.csv\n",
      "âœ… Matched peaks saved to: 4_TC11-C_matched.csv\n",
      "âœ… Matched peaks saved to: Control_Ti64_matched.csv\n",
      "\n",
      "âœ… All files processed.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import glob\n",
    "\n",
    "# --- Load API reference data ---\n",
    "alpha_api = pd.read_csv(\"API Peaks/Alpha_Ti_API_Peaks.csv\")\n",
    "beta_api = pd.read_csv(\"API Peaks/Beta_Ti_API_Peaks.csv\")\n",
    "\n",
    "# Normalize HKL format as strings\n",
    "alpha_api['HKL'] = alpha_api['HKL'].apply(lambda x: x.strip())\n",
    "beta_api['HKL'] = beta_api['HKL'].apply(lambda x: x.strip())\n",
    "\n",
    "# --- Tolerance input ---\n",
    "try:\n",
    "    tolerance = float(input(\"Enter matching tolerance in degrees (e.g., 0.5): \"))\n",
    "except ValueError:\n",
    "    print(\"Invalid input. Using default tolerance of 0.5Â°\")\n",
    "    tolerance = 0.5\n",
    "\n",
    "# --- Prepare output folder ---\n",
    "output_folder = \"Matched Peaks\"\n",
    "os.makedirs(output_folder, exist_ok=True)\n",
    "\n",
    "# --- Match peaks for each alloy file ---\n",
    "for filepath in sorted(glob.glob(\"Cleaned XRD/*.csv\")):\n",
    "    df = pd.read_csv(filepath)\n",
    "    output_df = df.copy()\n",
    "    output_df['Phase'] = ''\n",
    "    output_df['Phase Angle'] = ''\n",
    "    output_df['HKL'] = ''\n",
    "\n",
    "    for idx, angle in enumerate(df['Angle']):\n",
    "        closest_match = None\n",
    "        closest_diff = np.inf\n",
    "\n",
    "        # Check beta peaks\n",
    "        for _, row in beta_api.iterrows():\n",
    "            diff = abs(angle - row['Angle (2Î¸)'])\n",
    "            if diff < closest_diff and diff <= tolerance:\n",
    "                closest_match = ('Beta', row['Angle (2Î¸)'], row['HKL'])\n",
    "                closest_diff = diff\n",
    "\n",
    "        # Check alpha peaks\n",
    "        for _, row in alpha_api.iterrows():\n",
    "            diff = abs(angle - row['Angle (2Î¸)'])\n",
    "            if diff < closest_diff and diff <= tolerance:\n",
    "                closest_match = ('Alpha', row['Angle (2Î¸)'], row['HKL'])\n",
    "                closest_diff = diff\n",
    "\n",
    "        # Assign match if found\n",
    "        if closest_match:\n",
    "            phase, phase_angle, hkl = closest_match\n",
    "            output_df.at[idx, 'Phase'] = phase\n",
    "            output_df.at[idx, 'Phase Angle'] = phase_angle\n",
    "            output_df.at[idx, 'HKL'] = hkl\n",
    "\n",
    "    # Save matched output\n",
    "    out_filename = os.path.basename(filepath).replace(\".csv\", \"_matched.csv\")\n",
    "    output_df.to_csv(os.path.join(output_folder, out_filename), index=False)\n",
    "    print(f\"âœ… Matched peaks saved to: {out_filename}\")\n",
    "\n",
    "print(\"\\nâœ… All files processed.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e0f633e9-3c4d-49bc-8ea4-0ce4cf1e47f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Saved: 1_Ti64Si_solved.csv\n",
      "   Î±-Ti a = 2.9348 Ã… | c = 4.6833 Ã… | c/a = 1.5958\n",
      "   Î²-Ti a = 3.2611 Ã…\n",
      "âœ… Saved: 2_Ti35_solved.csv\n",
      "   Î±-Ti a = 2.9314 Ã… | c = 4.6882 Ã… | c/a = 1.5993\n",
      "   Î²-Ti a = 3.2633 Ã…\n",
      "âœ… Saved: 3_Ti666_solved.csv\n",
      "   Î±-Ti a = 2.9523 Ã… | c = 4.6735 Ã… | c/a = 1.5830\n",
      "   Î²-Ti a = 3.2640 Ã…\n",
      "âœ… Saved: 4_TC11-C_solved.csv\n",
      "   Î±-Ti a = 2.9450 Ã… | c = 4.6849 Ã… | c/a = 1.5908\n",
      "   Î²-Ti a = 3.2359 Ã…\n",
      "âœ… Saved: Control_Ti64_solved.csv\n",
      "   Î±-Ti a = 2.9219 Ã… | c = 4.6877 Ã… | c/a = 1.6043\n",
      "   Î²-Ti a = 3.2548 Ã…\n",
      "\n",
      "ðŸŽ‰ All lattice parameters solved and saved.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import glob\n",
    "import math\n",
    "\n",
    "# Output folder\n",
    "output_folder = \"Lattice Solved\"\n",
    "os.makedirs(output_folder, exist_ok=True)\n",
    "\n",
    "wavelength = 1.5406  # Cu KÎ± in Ã…\n",
    "\n",
    "def bragg_to_d(angle_deg):\n",
    "    theta_rad = np.radians(angle_deg / 2)\n",
    "    return wavelength / (2 * np.sin(theta_rad))\n",
    "\n",
    "def parse_hkl(hkl_str):\n",
    "    if not isinstance(hkl_str, str):\n",
    "        return []\n",
    "    hkl = hkl_str.strip().replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n",
    "    return list(map(int, [h.strip() for h in hkl]))\n",
    "\n",
    "# Loop through matched files\n",
    "for file in sorted(glob.glob(\"Matched Peaks/*_matched.csv\")):\n",
    "    df = pd.read_csv(file)\n",
    "\n",
    "    df['d_actual'] = df['Angle'].apply(bragg_to_d)\n",
    "    df['d_ref'] = df['Phase Angle'].apply(bragg_to_d)\n",
    "\n",
    "    # --- Beta phase ---\n",
    "    beta_df = df[df['Phase'] == 'Beta'].copy()\n",
    "    beta_df['HKL'] = beta_df['HKL'].apply(parse_hkl)\n",
    "\n",
    "    beta_df['h2k2l2'] = beta_df['HKL'].apply(lambda x: sum([i**2 for i in x]) if len(x) == 3 else np.nan)\n",
    "    beta_df['a_beta'] = beta_df.apply(lambda row: row['d_actual'] * math.sqrt(row['h2k2l2']) if not np.isnan(row['h2k2l2']) else np.nan, axis=1)\n",
    "    a_beta_mean = beta_df['a_beta'].dropna().mean()\n",
    "\n",
    "    # --- Alpha phase ---\n",
    "    alpha_df = df[df['Phase'] == 'Alpha'].copy()\n",
    "    alpha_eqns = []\n",
    "    alpha_targets = []\n",
    "\n",
    "    for _, row in alpha_df.iterrows():\n",
    "        d = row['d_actual']\n",
    "        hkl = parse_hkl(row['HKL'])\n",
    "        if len(hkl) != 4 or d <= 0:\n",
    "            continue\n",
    "        h, k, i, l = hkl\n",
    "        A = (4 / 3) * (h**2 + h*k + k**2)\n",
    "        B = l**2\n",
    "        alpha_eqns.append([A, B])\n",
    "        alpha_targets.append(1 / d**2)\n",
    "\n",
    "    # Solve least squares for a and c\n",
    "    if len(alpha_eqns) >= 2:\n",
    "        A_matrix = np.array(alpha_eqns)\n",
    "        b_vector = np.array(alpha_targets)\n",
    "\n",
    "        sol, _, _, _ = np.linalg.lstsq(A_matrix, b_vector, rcond=None)\n",
    "        a_alpha = np.sqrt(1 / sol[0]) if sol[0] > 0 else np.nan\n",
    "        c_alpha = np.sqrt(1 / sol[1]) if sol[1] > 0 else np.nan\n",
    "        ca_ratio = c_alpha / a_alpha if a_alpha > 0 else np.nan\n",
    "    else:\n",
    "        a_alpha, c_alpha, ca_ratio = np.nan, np.nan, np.nan\n",
    "\n",
    "    # --- Append back to full DataFrame ---\n",
    "    df['d_actual'] = df['d_actual'].round(5)\n",
    "    df['d_ref'] = df['d_ref'].round(5)\n",
    "    df['a_beta'] = beta_df['a_beta'].reindex(df.index).round(5)\n",
    "\n",
    "    # Save output\n",
    "    outname = os.path.basename(file).replace(\"_matched.csv\", \"_solved.csv\")\n",
    "    outpath = os.path.join(output_folder, outname)\n",
    "    df.to_csv(outpath, index=False)\n",
    "\n",
    "    print(f\"âœ… Saved: {outname}\")\n",
    "    if not np.isnan(a_alpha):\n",
    "        print(f\"   Î±-Ti a = {a_alpha:.4f} Ã… | c = {c_alpha:.4f} Ã… | c/a = {ca_ratio:.4f}\")\n",
    "    else:\n",
    "        print(\"   Î±-Ti: insufficient peaks\")\n",
    "\n",
    "    if not np.isnan(a_beta_mean):\n",
    "        print(f\"   Î²-Ti a = {a_beta_mean:.4f} Ã…\")\n",
    "    else:\n",
    "        print(\"   Î²-Ti: insufficient peaks\")\n",
    "\n",
    "print(\"\\nðŸŽ‰ All lattice parameters solved and saved.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b9e9bb2-ab43-4402-985d-45a641f1e9ac",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
